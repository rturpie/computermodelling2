#  ------ Computer Modelling Excersise 2 ---------

# importing needed libraries

import numpy as np 

# creating a Python class Particle3D that describes a point-like particle moving in 3D space

class Particle3D(object):
    """
    Class to describe 3D particles.

    Properties:
    label(string) - particle's label
    position(array) - position along the x,y and z axis
    velocity(array) - velocity along the x, y and z axis
    mass(float) - particle mass

    Methods: # FIX
    * initialise
    * formatted output
    * kinetic energy
    * first-order velocity update
    * first- and second order position updates
    """
    def __init__(self, label, pos, vel, mass):
        """
        Initialise a Particle3D instance
        
        :param label: label as string
        :param pos: position as an array
        :param vel: velocity as an array
        :param mass: mass as float
        """
 
        self.position = pos
        self.velocity = vel
        self.mass = mass
        self.label = label

    def __str__(self):
        """
        Define output format.
        For particle p=(2.0, 0.5, 1.0) this will print as
        "x = 2.0, v = 0.5, m = 1.0"
        """
        
        # CHECK print 
        return print("x = " + str((self.position)[0]) + ", y = " + str((self.position)[1]) + ", z = " + str((self.position)[2]) + ", label = " + str(self.label))

    def kinetic_energy(self):
        """
        Return kinetic energy
        """
        velocity_squared = np.dot(self.velocity,self.velocity)
        
        return 0.5*self.mass*velocity_squared

    # Time integration methods

    def leap_velocity(self, dt, force):
        """
        First-order velocity update,
        v(t+dt) = v(t) + dt*F(t)

        :param dt: timestep as float
        :param force: force on particle vector as numpy array
        """

        self.velocity = self.velocity + dt*force/self.mass

    def leap_pos1st(self, dt):
        """
        First-order position update,
        x(t+dt) = x(t) + dt*v(t)

        :param dt: timestep as float
        """

        self.position = self.position + dt*self.velocity

    def leap_pos2nd(self, dt, force):
        """
        Second-order position update,
        x(t+dt) = x(t) + dt*v(t) + 1/2*dt^2*F(t)

        :param dt: timestep as float
        :param force: current force vector as numpy array
        """

        self.position = self.position + dt*self.velocity + 0.5*dt**2*force/self.mass

    @staticmethod
    def create_particle(file_handle):
        """
            create a particle from a file entry
            
            :param file_handle: the file handle the paramenters of the particle will be taken from
            :return: the new particle as a Particle 3D object
            """
        
        filein = open(file_handle,"r")
        lines = filein.readlines()
        filein.close()
        # read in the file and return each line as the elements of a list of strings
        # the lines of the file in order are the parameters for creating the new Particle3D object as strings
        # each line is then converted from a string to the correct type needed to create the object
        
        # label, l, is supposed to be a string and so is left alone
        l = lines[0]
        
        # position, p, and velocity, v, must be converted to numpy arrays
        p = lines[1]
        p = list(map(lambda a: float(a), p.split(",")))
        p = np.array(p)
        v = lines[2]
        v = list(map(lambda a: float(a), v.split(",")))
        v = np.array(v)
        
        # the mass, m, is converted to a float
        m = float(lines[3])
        
        return Particle3D(l,p,v,m)

    @staticmethod
    def calculate_seperation(particle1, particle2):
        """
            calculate the relative vector seperation of two particles
            
            :param particle1: the first particle 
            :param particle2: the second particle
            :return: the relative vector seperation of the first and second particle
            """
        return particle1.position - particle2.position

    









"""def main():
    x = Particle3D.create_particle("new_particle.txt")
    y = Particle3D("lmao", np.array([2,2,3]), np.array([2,5,3]), 22)
    ke = x.kinetic_energy()
    z = Particle3D.calculate_seperation(x,y)
    print(z)
    

main()

new_particle = Particle3D(create_particle("new_particle.txt"))

test = Particle3D("lmao", np.array([1,2,3]), np.array([2,5,3]), 22)
postn = test.__str__()
ke = test.kinetic_energy()
update_v = test.leap_velocity(0.1,np.array([2,3,0.5]))
update1 = test.leap_pos1st(0.1)
update2 = test.leap_pos2nd(0.1,np.array([2,5,3]))
print(str(ke))
print(str(update_v))
print(str(update1))
print(str(update2))"""

#  ------ Computer Modelling Excersise 2 ---------

# test program that performs time integration for two particles’ motion
# uses the symplectic Euler time integration algorithm

# importing needed libraries and particle3D from particle 3D
import sys
import math
import numpy as np
import matplotlib.pyplot as pyplot
from Particle3D import Particle3D

def force_mp(particle1, particle2, alpha, depth, re):

    """
    Method to return the force on particle1 in a morse potential.
    Force is given by
    F(r1,r2) = −2αDe(1 − exp [−α(r12 − re)]) exp [−α(r12 − re)]rˆ12

    :param particle1: Particle3D instance, particle 1
    :param particle2: Particle3D instance, particle 2
    :param alpha: parameter α from potential 
    :param depth: parameter De from potential
    :param re: parameter re from potential
    :return: force acting on particle1 as Numpy array
    """
    
    d1d2 = particle1.position - particle2.position # vector difference between position of particle1 and position of particle2
    dist = np.linalg.norm(d1d2) # distance between the two particles
    exponent = math.exp(-alpha*(dist-re))
    force = -2*alpha*depth*(1-exponent)*exponent*d1d2/dist
    return force

def pot_energy_mp(particle1, particle2, alpha, depth, re):

    """
    Method to return potential energy of particles in morse a potential.
    Potential is given by
    U(r1,r2) = De(1 − exp [−α(r12 − re)])2 − 1

    :param particle1: Particle3D instance, particle 1
    :param particle2: Particle3D instance, particle 2
    :param alpha: parameter α from potential 
    :param depth: parameter De from potential
    :param re: parameter re from potential
    :return: potential energy of the particles as a float
    """
    
    d1d2 = particle1.position - particle2.position # vector difference between position of particle1 and position of particle2
    dist = np.linalg.norm(d1d2) # distance between the two particles
    exponent = math.exp(-alpha*(dist-re))
    potential = depth * ((1-exponent)**2-1)
    return potential

# Begin main code
def main():

    # Read name of output file from command line
    if len(sys.argv)!=2:
        print("Wrong number of arguments.")
        print("Usage: " + sys.argv[0] + " <input file>")
        quit()
    

    # Open input file
    filein = open(sys.argv[1],"r")
    lines = filein.readlines()
    filein.close()

    # read in the file and return each line as the elements of a list of strings
    # each line is then converted from a string to a float

    mass = float(lines[0])
    well_depth = float(lines[1]) # De in formulas 
    equilibrium_bond_distance = float(lines[2]) # re in formulas
    curvature = float(lines[3]) # α in formulas

    # Open output file
    #outfile = open(outfile_name, "w")

    # Set up simulation parameters
    dt = 0.01
    numstep = 2000
    time = 0.0


    # Set up particle initial conditions: FIX
    #  position particle 1 r1 = (re/2, 0, 0), where re is read from the input file and stored as equilibrium_bond_distance
    #  velocity particle 1 v1 = (0.1, 0, 0)
    #  mass particle 1 read from input file
    #  position particle 2 r2 = (-re/2, 0, 0), where re is read from the input file and stored as equilibrium_bond_distance
    #  velocity particle 2 v2 = (-0.1, 0, 0)
    #  mass particle 2 read from input file

    p1 = Particle3D("Particle1", np.array([equilibrium_bond_distance/2,0,0]),np.array([0.1,0,0]), mass)
    p2 = Particle3D("Particle1", np.array([-equilibrium_bond_distance/2,0,0]),np.array([-0.1,0,0]), mass)

    # Write out initial conditions
    # Total initial energy calculated using: Etot = T1 + T2 + U12
    energy = p1.kinetic_energy() + p2.kinetic_energy() + pot_energy_mp(p1,p2, curvature, well_depth, equilibrium_bond_distance)
    #outfile.write("{0:f} {1:f} {2:12.8f}\n".format(time,p1.position,energy))


    # Initialise data lists for plotting later
    time_list = [time]
    seperation_list = [np.linalg.norm(p1.position - p2.position)]
    energy_list = [energy]

    # Start the time integration loop

    for i in range(numstep):
        # Update particle position
        p1.leap_pos1st(dt)
        p2.leap_pos1st(dt)
        
        # Calculate forces on each particle
        force1 = force_mp(p1,p2,curvature,well_depth,equilibrium_bond_distance)
        force2 = -force1
        # Update particle velocity for both particles
        p1.leap_velocity(dt, force1)
        p2.leap_velocity(dt, force2)
        
        # Increase time
        time = time + dt
        
        # Output particle information
        energy = p1.kinetic_energy() + p2.kinetic_energy() + pot_energy_mp(p1,p2, curvature, well_depth, equilibrium_bond_distance)
        #outfile.write("{0:f} {1:f} {2:12.8f}\n".format(time,p1.position,energy))

        # Append information to data lists
        time_list.append(time)
        seperation_list.append(np.linalg.norm(p1.position - p2.position))
        energy_list.append(energy)

    # Post-simulation:
    
    # Close output file
    # outfile.close()

    # Plot particle trajectory to screen
    pyplot.title('Symplectic Euler: particle seperation vs time')
    pyplot.xlabel('Time')
    pyplot.ylabel('Seperation')
    pyplot.plot(time_list, seperation_list)
    pyplot.show()

    # Plot particle energy to screen
    pyplot.title('Symplectic Euler: total energy vs time')
    pyplot.xlabel('Time')
    pyplot.ylabel('Energy')
    pyplot.plot(time_list, energy_list)
    pyplot.show()


# Execute main method:
main()

import sys
import math
import numpy as np
import matplotlib.pyplot as pyplot
from Particle3D import Particle3D

def force_mp(particle1, particle2, alpha, depth, re):

    """
    Method to return the force on particle1 in a morse potential.
    Force is given by
    F(r1,r2) = −2αDe(1 − exp [−α(r12 − re)]) exp [−α(r12 − re)]rˆ12

    :param particle1: Particle3D instance, particle 1
    :param particle2: Particle3D instance, particle 2
    :param alpha: parameter α from potential 
    :param depth: parameter De from potential
    :param re: parameter re from potential
    :return: force acting on particle1 as Numpy array
    """
    
    d1d2 = particle1.position - particle2.position # vector difference between position of particle1 and position of particle2
    dist = np.linalg.norm(d1d2) # distance between the two particles
    exponent = math.exp(-alpha*(dist-re))
    force = -2*alpha*depth*(1-exponent)*exponent*d1d2/dist
    return force

def pot_energy_mp(particle1, particle2, alpha, depth, re):

    """
    Method to return potential energy of particles in morse a potential.
    Potential is given by
    U(r1,r2) = De(1 − exp [−α(r12 − re)])2 − 1

    :param particle1: Particle3D instance, particle 1
    :param particle2: Particle3D instance, particle 2
    :param alpha: parameter α from potential 
    :param depth: parameter De from potential
    :param re: parameter re from potential
    :return: potential energy of the particles as a float
    """
    
    d1d2 = particle1.position - particle2.position # vector difference between position of particle1 and position of particle2
    dist = np.linalg.norm(d1d2) # distance between the two particles
    exponent = math.exp(-alpha*(dist-re))
    potential = depth * ((1-exponent)**2-1)
    return potential

# Begin main code
def main():

    # Read name of output file from command line
    if len(sys.argv)!=2:
        print("Wrong number of arguments.")
        print("Usage: " + sys.argv[0] + " <input file>")
        quit()
    

    # Open input file
    filein = open(sys.argv[1],"r")
    lines = filein.readlines()
    filein.close()

    # read in the file and return each line as the elements of a list of strings
    # each line is then converted from a string to a float

    mass = float(lines[0])
    well_depth = float(lines[1]) # De in formulas 
    equilibrium_bond_distance = float(lines[2]) # re in formulas
    curvature = float(lines[3]) # α in formulas

    # Open output file
    #outfile = open(outfile_name, "w")

    # Set up simulation parameters
    dt = 0.01
    numstep = 2000
    time = 0.0


    # Set up particle initial conditions: FIX
    #  position particle 1 r1 = (re/2, 0, 0), where re is read from the input file and stored as equilibrium_bond_distance
    #  velocity particle 1 v1 = (0.1, 0, 0)
    #  mass particle 1 read from input file
    #  position particle 2 r2 = (-re/2, 0, 0), where re is read from the input file and stored as equilibrium_bond_distance
    #  velocity particle 2 v2 = (-0.1, 0, 0)
    #  mass particle 2 read from input file

    p1 = Particle3D("Particle1", np.array([equilibrium_bond_distance/2,0,0]),np.array([0.1,0,0]), mass)
    p2 = Particle3D("Particle1", np.array([-equilibrium_bond_distance/2,0,0]),np.array([-0.1,0,0]), mass)

    # Write out initial conditions
    # Total initial energy calculated using: Etot = T1 + T2 + U12
    energy = p1.kinetic_energy() + p2.kinetic_energy() + pot_energy_mp(p1,p2, curvature, well_depth, equilibrium_bond_distance)

    # Get initial force
    force1 = force_mp(p1,p2,curvature,well_depth,equilibrium_bond_distance)
    force2 = -force1

    # Initialise data lists for plotting later
    time_list = [time]
    seperation_list = [np.linalg.norm(p1.position - p2.position)]
    energy_list = [energy]

    # Start the time integration loop

    for i in range(numstep):
        
        # Update particle position
        p1.leap_pos2nd(dt,force1)
        p2.leap_pos2nd(dt,force2)

        # Update force
        force_new1 = force_mp(p1,p2,curvature,well_depth,equilibrium_bond_distance)
        force_new2 = - force_new1
        # Update particle velocity by averaging
        # current and new forces
        p1.leap_velocity(dt, 0.5*(force1+force_new1))
        p2.leap_velocity(dt, 0.5*(force2+force_new2))
        
        # Re-define force value
        force1 = force_new1
        force2 = force_new2

         # Increase time
        time = time + dt
        
        # Output particle information
        energy = p1.kinetic_energy() + p2.kinetic_energy() + pot_energy_mp(p1,p2, curvature, well_depth, equilibrium_bond_distance)

        # Append information to data lists
        time_list.append(time)
        seperation_list.append(np.linalg.norm(p1.position - p2.position))
        energy_list.append(energy)

    # Post-simulation:

   # Plot particle trajectory to screen
    pyplot.title('Velocity Verlet: particle seperation vs time')
    pyplot.xlabel('Time')
    pyplot.ylabel('seperation')
    pyplot.plot(time_list, seperation_list)
    pyplot.show()

    # Plot particle energy to screen
    pyplot.title('Velocity Verlet: total energy vs time')
    pyplot.xlabel('Time')
    pyplot.ylabel('Energy')
    pyplot.plot(time_list, energy_list)
    pyplot.show()


# Execute main method:
main()

#test particle .txt
particlelmao
1,2,3
2,5,3
22

#nitrogen 

14.01
9.90523
1.09768
2.68867

#oxygen

16.00
5.21322
1.20752
2.65374
